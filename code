import pickle
import streamlit as st
import requests
import pandas as pd


def fetch_poster(movie_id):
    url = f"https://api.themoviedb.org/3/movie/{movie_id}?api_key=8265bd1679663a7ea12ac168da84d2e8&language=en-US"
    data = requests.get(url).json()
    poster_path = data.get('poster_path', '')
    full_path = f"https://image.tmdb.org/t/p/w500/{poster_path}" if poster_path else ""
    return full_path


def recommend(movie, genres, min_popularity):
    if genres:  
        filtered_movies = movies[
            (movies['genres'].apply(lambda x: any(genre in x for genre in genres))) &
            (movies['popularity'] >= min_popularity)
        ]
    else:  
        filtered_movies = movies[movies['popularity'] >= min_popularity]

    recommended_movie_names = []
    recommended_movie_posters = []

    if movie == "Any":
        top_movies = filtered_movies.sort_values(by='popularity', ascending=False).head(20)
        for _, row in top_movies.iterrows():
            recommended_movie_names.append(row['title'])
            recommended_movie_posters.append(fetch_poster(row['movie_id']))
    else:
        index = movies[movies['title'] == movie].index[0]
        distances = sorted(list(enumerate(similarity[index])), reverse=True, key=lambda x: x[1])

        for i in distances:
            movie_id = movies.iloc[i[0]].movie_id
            title = movies.iloc[i[0]].title
            if title in filtered_movies['title'].values:
                recommended_movie_posters.append(fetch_poster(movie_id))
                recommended_movie_names.append(title)

        if not recommended_movie_names:
            for i in distances[:len(distances)]:
                movie_id = movies.iloc[i[0]].movie_id
                recommended_movie_posters.append(fetch_poster(movie_id))
                recommended_movie_names.append(movies.iloc[i[0]].title)

    return recommended_movie_names, recommended_movie_posters


st.header('Movie Recommender System')
movies = pickle.load(open('movie_list1.pkl', 'rb'))
similarity = pickle.load(open('similarity1.pkl', 'rb'))


unique_genres = set([genre for genres in movies['genres'] for genre in genres])

movie_list = ["Any"] + list(movies['title'].values) 
selected_movie = st.selectbox("Type or select a movie from the dropdown (or select 'Any')", movie_list)

selected_genres = st.multiselect("Select preferred genres", unique_genres)
min_popularity = st.slider("Minimum popularity (0-100)", 0, 100, 50)

if "show_count" not in st.session_state:
    st.session_state.show_count = 5

recommended_movie_names, recommended_movie_posters = recommend(selected_movie, selected_genres, min_popularity)

if recommended_movie_names:
    for idx in range(st.session_state.show_count):
        if idx < len(recommended_movie_names):
            col = st.columns(1)
            with col[0]:
                st.text(recommended_movie_names[idx])
                st.image(recommended_movie_posters[idx])

    if st.session_state.show_count < len(recommended_movie_names):
        if st.button("Show More"):
            st.session_state.show_count += 5
else:
    st.write("No movies found matching your preferences.")


st.markdown("---")
st.markdown("Developed by Kanishka M")
